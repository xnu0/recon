import os
import tempfile
from typing import List, Dict
from modules.base_module import BaseModule

class VulnerabilityModule(BaseModule):
    def run(self, targets: List[str]) -> Dict[str, List[Dict]]:
        targets_file = self.write_targets_file(targets)
        try:
            vulns = self.run_nuclei(targets_file)
            categorized = self.categorize_vulnerabilities(vulns)
            return {
                'vulnerabilities': vulns,
                'categorized': categorized,
                'total_vulns': len(vulns)
            }
        finally:
            if os.path.exists(targets_file):
                os.unlink(targets_file)

    def run_nuclei(self, targets_file: str) -> List[Dict]:
        cmd = [
            'nuclei', '-l', targets_file, '-json', '-silent',
            '-timeout', str(self.config.get('timeout', 10))
        ]
        severity = self.config.get('severity')
        if severity:
            cmd.extend(['-severity', ','.join(severity)])
        if self.config.get('nuclei_templates'):
            cmd.extend(['-t', self.config['nuclei_templates']])
        if self.config.get('mode') == 'stealth':
            cmd.extend(['-rate-limit', '5'])
        result = self.execute_tool(cmd, timeout=600)
        return self.parse_json_output(result.stdout)

    def write_targets_file(self, targets: List[str]) -> str:
        with tempfile.NamedTemporaryFile('w', suffix='.txt', delete=False) as f:
            for t in targets:
                f.write(f"{t}\n")
            return f.name

    def categorize_vulnerabilities(self, vulns: List[Dict]) -> Dict[str, List[Dict]]:
        categories = {'critical': [], 'high': [], 'medium': [], 'low': [], 'info': []}
        for v in vulns:
            sev = v.get('info', {}).get('severity', 'info').lower()
            if sev in categories:
                categories[sev].append(v)
        return categories
